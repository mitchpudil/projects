#+TITLE: Problem Bank

For an organized list of all assignments, with information and links, see the
tables below.

All the assignments are tagged with relevant topical designations to
help you find problems of interest. /Every/ assignment is listed in the
=All/= directory above, and the other subdirectories contain links to
assignments with a particular tag. Five special tags (with
capitalized names) represent broad groupings that match key course
themes. These are:

1. =Foundations/=, basic practice for learning and review of programming
   fundamentals and background concepts
2. =Tools-Practices/=, about tools and best practices (Git, the shell, testing,
   style...)
3. =Algorithms-DataStructures/=, about algorithms and data structures.
4. =Data-Methods/=, about specific data analytic methods, like text analysis, SQL,
   clustering, high-dimensional data...
5. =Computing-Concepts/=, on programming concepts like recursion, object-oriented
   programming, functional programming, etc.

You should aim to complete several assignments in each of categories 2 through 5.

*Instructions for starting and submitting assignments* are on the [[https://36-750.github.io/course-info/assignment-instructions/][course website]].

** Assignment List

   (Vignettes consist of multiple exercises, each submitted separately. Each
   exercise can have a different number of points, so these are marked "/v/".)

*** Foundations

    Work on problems in the =Foundations= category only if you need extra practice
    or review to feel comfortable with programming.

    | Assignment | Points | Description                                 |
    |------------+--------+---------------------------------------------|
    | [[file:All/loopy.pdf][loopy]]      |      1 | Simple looping practice                     |
    | [[file:All/dos2unix.pdf][dos2unix]]   |      1 | Convert line endings; learn simple file I/O |

*** Tools and Practices

    | Assignment       | Points | Description                                           |
    |------------------+--------+-------------------------------------------------------|
    | [[file:All/code-review.pdf][code-review]]      |      2 | Review code with constructive feedback                |
    | [[file:All/mean-assert.pdf][mean-assert]]      |      2 | Write assertions to detect problems                   |
    | [[file:All/test-this.pdf][test-this]]        |      1 | Basic unit testing practice                           |
    | [[file:All/test-this-random.pdf][test-this-random]] |      2 | Unit testing with functions that have random output   |
    | [[file:All/what-does-it-do.pdf][what-does-it-do]]  |      1 | Fix code to make its purpose clearer, have good style |
    | [[file:All/naming.pdf][naming]]           |      1 | Fix variable names in code to be clearer              |
    | [[file:All/git-challenge.pdf][git-challenge]]    |      2 | A Git scavenger hunt                                  |
    | [[file:All/cli-murders.pdf][cli-murders]]      |      2 | A command line scavenger hunt                         |
    | [[file:All/polyglot.pdf][polyglot]]         |      3 | Advanced: figure out how weird shell scripts work     |

*** Algorithms and Data Structures

    | Assignment        | Points | Description                                                 |
    |-------------------+--------+-------------------------------------------------------------|
    | [[file:All/edit-distance.pdf][edit-distance]]     |      2 | Calculate edit distance using dynamic programming           |
    | [[file:All/sudoku.pdf][sudoku]]            |      2 | Solve Sudoku puzzles using backtracking                     |
    | [[file:All/maze-solver.pdf][maze-solver]]       |      3 | Solve a maze and print out the best solution                |
    | [[file:All/moolympics.pdf][moolympics]]        |      2 | Traverse a graph to help cows ski                           |
    | [[file:All/order.pdf][order]]             |      2 | Divide-and-conquer problem similar to mergesort             |
    | [[file:All/closest-pair.pdf][closest-pair]]      |      3 | A tricky divide-and-conquer problem with fun geometry       |
    | [[file:All/binary-search.pdf][binary-search]]     |      /v/ | Divide-and-conquer searching of a sorted list               |
    | [[file:All/tree-builder.pdf][tree-builder]]      |      2 | Build a simple binary tree and get great recursion practice |
    | [[file:All/anagrams.pdf][anagrams]]          |      2 | Find anagrams in a file, using a good data structure        |
    | [[file:All/cow-proximity.pdf][cow-proximity]]     |      2 | Use a data structure to solve a goofy cow puzzle            |
    | [[file:All/das-blinkenlights.pdf][das-blinkenlights]] |      2 | Shortcut a slow calculation using a data structure          |

*** Computing Concepts

    | Assignment          | Points | Description                                                           |
    |---------------------+--------+-----------------------------------------------------------------------|
    | [[file:All/no-loops.pdf][no-loops]]            |      2 | Use functional programming to solve simple problems                   |
    | [[file:All/kernel-smoother.pdf][kernel-smoother]]     |      2 | Use functional programming to make a kernel smoother                  |
    | [[file:All/graph-classes.pdf][graph-classes]]       |      2 | Design classes and methods to store graphs, including nodes and edges |
    | [[file:All/cow-proximity-redux.pdf][cow-proximity-redux]] |      2 | Redo cow-proximity with a functional or object-oriented approach      |

*** Data and Methods

    | Assignment                | Points | Description                                                        |
    |---------------------------+--------+--------------------------------------------------------------------|
    | [[file:All/neural-nets.pdf][neural-nets]]               | /v/      | Implement a simple feed-forward neural network and backpropagation |
    | [[file:All/dealing-with-CRUD.pdf][dealing-with-CRUD]]         | /v/      | Vignette on using SQL to manipulate data                           |
    | [[file:All/sfn.pdf][sfn]]                       | 2      | Write SQL queries to calculate interesting things                  |
    | [[file:All/markov-babbler.pdf][markov-babbler]]            | /v/      | Use Markov chains to generate random text; good starter HW         |
    | [[file:All/information-retrieval-bow.pdf][information-retrieval-bow]] | /v/      | Use bag of words to search and analyze text data                   |

** Challenges

   The Challenge projects are separate from normal homework. They're in four
   parts, to be submitted throughout the semester. A schedule is [[https://36-750.github.io/course-info/syllabus/#challenges][given in the
   syllabus]].

   Start *each part* of the Challenge projects by using =new-homework=, just like
   you'd do with a vignette. That way, part 3 of =classification-tree= will be a
   branch named =classification-tree-3=, and so on.

   - [[file:All/classification-tree.pdf][classification-tree]] :: Implement classification trees and forests from
        scratch, and use them to classify data scraped from web sites (in part 4).
   - [[file:All/autocomplete-me.pdf][autocomplete-me]] :: Build a prefix tree (trie) to rapidly suggests
        completions for queries typed by users; in part 4, use Rcpp or Cython to
        speed this up.
   - [[file:All/shazam.pdf][shazam]] :: Use audio fingerprinting to match recordings of a small part of a
        song to a database of songs.
   - [[file:All/anomaly-speed.pdf][anomaly-speed]] :: Use isolation forests to analyze videos and detect
        anomalies, and use this to track cars as they move through a video.
